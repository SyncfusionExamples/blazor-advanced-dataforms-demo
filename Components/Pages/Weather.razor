@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}


@* @using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
<div style="width: 250px">
    <SfListBox @ref="sfListBox" TValue="string[]" DataSource="@Vehicles" TItem="VehicleData" CssClass="e-custom" AllowDragAndDrop="true">
        <ListBoxFieldSettings Text="Text" Value="Id" />
        <ListBoxEvents  TValue="string[]" TItem="VehicleData"></ListBoxEvents>
        <ListBoxTemplates TItem="VehicleData">
            <ItemTemplate>
                <div class="list-wrapper" >
                    <SfIcon IconCss="e-icons e-drag-and-drop" ></SfIcon>
                    <span class="e-list-text">@context.Text</span>
                    <SfIcon IconCss="e-icons e-trash" ></SfIcon>
                </div>
            </ItemTemplate>
        </ListBoxTemplates>
    </SfListBox>
</div>


@code {
    SfListBox<string[], VehicleData> sfListBox;

    public List<VehicleData> Vehicles = new List<VehicleData>
    {
        new VehicleData { Text = "1", Id = "Vehicle-01" },
        new VehicleData { Text = "2", Id = "Vehicle-02" },
        new VehicleData { Text = "3", Id = "Vehicle-03" },
        new VehicleData { Text = "4", Id = "Vehicle-04" },
        new VehicleData { Text = "5", Id = "Vehicle-05" }
    };
    public class VehicleData
    {
        public string Text { get; set; }
        public string Id { get; set; }
    }
}

<style>
    .e-custom .e-list-item .list-wrapper {
        display: flex;
    }

</style> *@


@* @using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons

<div style="margin: 100px">
    <SfDropDownButton Content="File" CssClass="e-custom-dm">
        <PopupContent>
            <SfMenu TValue="MenuItem">
                <MenuItems>
                    <MenuItem Text="Appliances">
                    </MenuItem>
                    <MenuItem Text="Mobile">
                    </MenuItem>
                    <MenuItem Text="Entertainment">
                    </MenuItem>
                </MenuItems>
            </SfMenu>
        </PopupContent>
    </SfDropDownButton>

    <SfDropDownButton Content="Clipboard">
        <DropDownMenuItems>
            <DropDownMenuItem Text="Cut"></DropDownMenuItem>
            <DropDownMenuItem Text="Copy"></DropDownMenuItem>
            <DropDownMenuItem Text="Paste"></DropDownMenuItem>
        </DropDownMenuItems>
    </SfDropDownButton>
</div> *@


@* @using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@inject IJSRuntime JSRuntime

<div id="target">
    <SfContextMenu @ref="contextMenuObj" TValue="MenuItem">
        <MenuItems>
            <MenuItem Text="Cut"></MenuItem>
            <MenuItem Text="Copy"></MenuItem>
            <MenuItem Text="Paste"></MenuItem>
        </MenuItems>
        <MenuEvents TValue="MenuItem" Opened="ColumnMenuOpenedHandler" Closed="ColumnMenuClosedHandler"></MenuEvents>
    </SfContextMenu>
    <SfButton @onclick="OpenContextMenu">Open ContextMenu</SfButton>
</div>

@code {
    SfContextMenu<MenuItem> contextMenuObj;
    bool initialColumnMenuClass = true;
    private async void OpenContextMenu(MouseEventArgs e)
    {
        await contextMenuObj.OpenAsync(e.ClientX, e.ClientY);
    }

    private async void ColumnMenuOpenedHandler(OpenCloseMenuEventArgs<MenuItem> args)
    {

        var position = await JSRuntime.InvokeAsync<Position>("getElementPosition");


    }
    private class Position
    {
        public double Left { get; set; }
        public double Top { get; set; }
    }

    private void ColumnMenuClosedHandler(OpenCloseMenuEventArgs<MenuItem> args)
    {

    }
} *@

@* @using Syncfusion.Blazor.QueryBuilder

<SfQueryBuilder @ref="qbObj" ID="querybuilder1"  DataSource="@EmployeeData" EnablePersistence="true">
    <QueryBuilderEvents TValue="EmployeeDetails" Created="created"></QueryBuilderEvents>
    <QueryBuilderColumns>
        <QueryBuilderColumn Field="EmployeeID" Label="Employee ID" Type="ColumnType.Number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="FirstName" Label="First Name" Type="ColumnType.String"></QueryBuilderColumn>
        <QueryBuilderColumn Field="HireDate" Label="Hire Date" Type="ColumnType.Date"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Country" Label="Country" Type="ColumnType.String"></QueryBuilderColumn>
    </QueryBuilderColumns>
</SfQueryBuilder>

@code {
    SfQueryBuilder<EmployeeDetails> qbObj;
    public List<EmployeeDetails> EmployeeData = new List<EmployeeDetails>
    {
        new EmployeeDetails{ FirstName = "Martin", EmployeeID = 1001, Country = "England", City = "Manchester", HireDate = new DateTime(2014, 4, 23) },
        new EmployeeDetails{ FirstName = "Benjamin", EmployeeID = 1002, Country = "England", City = "Birmingham", HireDate = new DateTime(2014, 6, 19) },
        new EmployeeDetails{ FirstName = "Stuart", EmployeeID = 1003, Country = "England", City = "London", HireDate = new DateTime(2014, 7, 4) },
        new EmployeeDetails{ FirstName = "Ben", EmployeeID = 1004, Country = "USA", City = "California", HireDate = new DateTime(2014, 8, 15) },
        new EmployeeDetails{ FirstName = "Joseph", EmployeeID = 1005, Country = "Spain", City = "Madrid", HireDate = new DateTime(2014, 8, 29) }
    };

    public class EmployeeDetails
    {
        public string FirstName { get; set; }
        public int EmployeeID { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public DateTime HireDate { get; set; }
    }
    private void created()
    {
        var hasRules = qbObj.GetValidRules();
    }
}
 *@